Using Operators covered in '05. Conditional Statements' we can now build some basic looping examples 
Loops in general are versatile and can be adapted to various scenarios. They allow you to iterate over lists, directories, or any other collection of items in your scripts.


****************************************************************************************************************************************************************************
For Loops:
****************************************************************************************************************************************************************************
EXAMPLE:
A 'for' loop is a control structure in programming that allows you to repeat a set of commands for each item in a list. It’s like a conveyor belt that processes each item one by one.

SYNTAX:
    for variable in list: 
      This line initializes a loop. The variable represents the current item from the list.
    do: 
      This marks the beginning of the loop body.
    # Commands to execute for each item in the list: 
      Here, you can put any commands or actions you want to perform on each item.
    done: 
      This marks the end of the loop.

for variable in list
do
    # Commands to execute for each item in the list
done
--------------------------------------------------------------------
EXAMPLE:
The ‘for’ loop is flexible and powerful. You can redirect the output of other commands in the loop, and then process each item in the list.

SYNTAX:
    for user in: 
        This begins a for loop that will iterate over a list of items. 
    cut -d: -f1 /etc/passwd: 
        This command processes the /etc/passwd file 
    -d:
        This sets the delimiter to : (colon). The /etc/passwd file is colon-delimited.
    -f1: 
        This selects the first field from each line. In the /etc/passwd file, the first field is the username.
    do: 
        This signifies the end of the for loop header and the start of the loop body.
    echo "User: $user":
        This is the body of the for loop. For each iteration, it prints "User: " followed by the username stored in the variable user.
    done:
        This marks the end of the for loop.

#!/bin/bash
for user in $(awk -F: '{ print $1 }' /etc/passwd); do
  printf "User: %s\n" "$user"
done


****************************************************************************************************************************************************************************
While Loops:
****************************************************************************************************************************************************************************
The bash while loop is a control flow statement that allows code or commands to be executed repeatedly based on a given condition. For example, run echo command 5 times or read text file line by line or evaluate the options passed on the command line for a script.

The condition is sort of tricky; Bash doesn’t have boolean values like true and false. Instead, it has commands, and every command that you run in the shell has to return a number. When programs run to completion without an error, they return 0. When an error occurs, they return an error code, which is usually 1, -1, or some other number that corresponds to the type of error that occurred.

For the most part, we ignore this and coerce Bash into behaving as if it had booleans. To do this, we can use the 'test' program, which is abbreviated as [. For a comprehensive reference, see man test

EXAMPLE:
This basic while loop starts with a counter set to 1 and increments it by 1 each time through the loop, printing the counter's value, until the counter exceeds 5.
The while loop will continue to run until it returns the condition 'false' (an error code is returned).

SYNTAX:
    counter=1:
        This assigns the numerical value of 1 to the parameter 'counter'.
    while [ "$counter" -le 5 ]; do
        As long as the condition of the variable $counter is less than or equal to 5 the loop continues.
   printf "Counter: %d\n" "$counter"
        This is the body of the for loop. For each iteration, it prints "Counter: " followed by the number stored in the variable counter
    ((counter++)):
        This increments the counter variable by 1. This can be written in many ways - 
            Using (( )) with increment 
                ((counter+=1))
            Using let with Increment Operator
                let counter+=1
            Using Arithmetic Expansion
                counter=$((counter + 1))
    done:
        This marks the end of the for loop, meaning the condition has been met.

#!/bin/bash

# Initialize a counter variable
counter=1

# Loop while the counter is less than or equal to 5
while [ "$counter" -le 5 ]; do
    # Use printf for more consistent output formatting
    printf "Counter: %d\n" "$counter"
    # Increment the counter by 1
    ((counter++))
done
--------------------------------------------------------------------
EXAMPLE:
This basic while loop starts with a counter set to 1 and increments it by 1 each time through the loop, printing the counter's value, until the counter exceeds 5.

SYNTAX:
    while true; do:
        This runs the lopp indefinitely
    current_time=$(date +"%Y-%m-%d_%H-%M-%S"):
        This uses builtin command gets current date and time then formats it as YYYY-MM-DD_HH-MM-SS
    filename="newfile_$current_time.txt"
        This creates the variable 'filename' and adds the variable 'current_time' to the end of it 
    touch "$filename"
        creates a new file with the generated filename.
    sleep 3
        Pauses the script for 3 seconds
    echo "Do you want to exit? Y/N"
        Asks the user if they want to exit.
    read -r user_input
        This reads input from the user. The -r option is used to prevent backslashes from being interpreted as escape characters. 
    if [[ "$user_input" == "Y" || "$user_input" == "y" ]]; then
        If the user inputs "Y" or "y", the script continues.
    printf "\nExiting\n"
        Print Exiting with a blank line before and after
    exit 0
        Script terminates.
    else
    printf "\nContinuing\n"
    Script prints Continuing with a blank line before and after. The script repeats the loop.   
    fi
        This is used to mark the end of an if statement
    done
    This marks the end of the for loop, meaning the condition has been met.

#!/bin/bash

# This generates a file every 3 seconds
while true; do

# Get the current date and time
current_time=$(date +"%Y-%m-%d_%H-%M-%S")

# Define the filename with the date and time
filename="newfile_$current_time.txt"
touch "$filename"
sleep 3

echo "Do you want to exit? Y/N"
read -r user_input
if [[ "$user_input" == "Y" || "$user_input" == "y" ]]; then
    printf "\nExiting\n"
    exit 0
    else
    printf "\nContinuing\n"
    fi
done
****************************************************************************************************************************************************************************
Until Loops:
****************************************************************************************************************************************************************************
The until loop is similar to the while loop - The until loop in bash is used to execute a block of commands repeatedly until a specified condition becomes true. It's essentially the opposite of a while loop, which runs as long as the condition is true. (no error code is returned)
EXAMPLE:
# Basic Structure #
until [ condition ]; do
    # Commands to be executed
done
--------------------------------------------------------------------
#!/bin/bash

counter=10

until [ $counter -lt 1 ]; do
    echo "Counter: $counter"
    ((counter--))
done

echo "Countdown complete!"
--------------------------------------------------------------------
EXAMPLE: 
The following example shows how to use the until loop with a single condition. The script generates random numbers between 1 and 10 until it generates a number greater than 8.

SYNTAX:
    until (( num > 8 ))
        This starts the until loop. The loop will continue to execute the commands inside it until the condition num > 8 becomes true. The (( ... )) syntax is used for                arithmetic evaluation in Bash.
    do
        do marks the beginning of the block of commands that will be executed repeatedly by the until loop.
    num=$(( (RANDOM % 10) + 1 ))
        this generates a random number between 1 and 10 and assigns it to the variable num.
        RANDOM is a built-in Bash variable that generates a random number between 0 and 32767.
        (RANDOM % 10) takes the remainder of RANDOM divided by 10, which results in a number between 0 and 9.
        (( ... )) is used for arithmetic expansion.
        + 1 shifts the range from 0-9 to 1-10.
    echo "Generated number: $num"
        $num" prints the generated random number.
    done
        marks the end of the block of commands.
    echo "Loop finished!"
        prints the message

#!/bin/bash
until (( num > 8 ))
do
    # Generate a random number between 1 and 10
    num=$(( (RANDOM % 10) + 1 ))
    echo "Generated number: $num"
done
echo "Loop finished!"
****************************************************************************************************************************************************************************
The break statement:
****************************************************************************************************************************************************************************
The break statement is used to exit from a loop prematurely. When break is executed, the loop terminates immediately, and control is passed to the first statement after the loop.
EXAMPLE:
for i in {1..10}; do
    if [[ $i -eq 5 ]]; then
        echo "Breaking out of the loop at i=$i"
        break
    fi
    echo "i: $i"
done
echo "Loop terminated"
EXPLANATION:

The loop runs from 1 to 10.
When i equals 5, the break statement is executed.
The loop terminates, and "Loop terminated" is printed.
****************************************************************************************************************************************************************************
The continue statement:
****************************************************************************************************************************************************************************
The continue statement is used to skip the remaining commands in the current iteration of the loop and proceed to the next iteration.
EXAMPLE:
for i in {1..10}; do
    if [[ $i -eq 5 ]]; then
        echo "Skipping iteration at i=$i"
        continue
    fi
    echo "i: $i"
done
echo "Loop finished"

EXPLANATION:

The loop runs from 1 to 10.
When i equals 5, the continue statement is executed.
The loop skips the current iteration and continues with the next iteration.
****************************************************************************************************************************************************************************
Using break and continue in a while loop:
****************************************************************************************************************************************************************************

#!/bin/bash

counter=1

while [[ $counter -le 10 ]]; do
    if [[ $counter -eq 5 ]]; then
        echo "Skipping iteration at counter=$counter"
        ((counter++))
        continue
    fi

    if [[ $counter -eq 8 ]]; then
        echo "Breaking out of the loop at counter=$counter"
        break
    fi

    echo "counter: $counter"
    ((counter++))
done

echo "Loop terminated"

EXPLANATION:

The loop runs while counter is less than or equal to 10.
When counter equals 5, the continue statement is executed, skipping the iteration and proceeding to the next one.
When counter equals 8, the break statement is executed, terminating the loop.










Creating and Running Scripts:

*******************************************************************************************************************************************************************************
How to create a Bash script (.sh file).
*******************************************************************************************************************************************************************************
To create a Bash script the first line of the script needs to include the correct shebang ('#!') line at the top to specify the interpreter - 
#!/bin/bash
OR
#!/usr/bin/env bash

       Other than using Notepad++ or VS Code other popular text editors and IDEs used for shell scripting are:

Vim:
       Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient.
       To open a file: vim filename.sh
       Basic commands:
       :i to insert text
       :w to save
       :q to quit
       :wq to save and quit

Nano:
       Nano is a simple, easy-to-use text editor for the command line.
       To open a file: nano filename.sh
       Basic commands:
       Ctrl+O to save
       Ctrl+X to exit

*******************************************************************************************************************************************************************************
Making a script executable
*******************************************************************************************************************************************************************************
chmod changes the file mode bits of each given file according to mode, which can be either a symbolic representation of changes to make, or an octal number representing the bit pattern for the new mode bits.

       Symbolic Notation: Uses letters (u, g, o, a, r, w, x) for readability.
       Octal Notation: Uses numbers (4, 2, 1, 0) for concise representation.
       Recursive Changes: Use -R to apply changes recursively.
       Special Permissions: setuid, setgid, and sticky bit for advanced permission management.

       Using Symbolic Notation
         Symbolic notation is more intuitive and human-readable. It uses u (user/owner), g (group), o (others), and a (all) to set permissions. The permissions are r (read), w          (write), and x (execute).

       Using Octal Notation
         Octal notation uses numbers to represent permissions. Each digit represents different sets of permissions.
         4 = read (r)
         2 = write (w)
         1 = execute (x)
         Each permission set (user, group, others) is represented by a digit. For example, 7 (4+2+1) means read, write, and execute permissions.

       chmod never changes the permissions of symbolic links; the chmod system call cannot change their permissions. This is not a problem since the permissions of symbolic           links are never used. However, for each symbolic link listed on the command line, chmod changes the permissions of the pointed-to file.  In contrast, chmod ignores             symbolic links encountered during recursive directory traversals

       Symbolic notation allows you to modify the permissions for a file or directory more granularly, targeting specific users (user, group, others) and specific types of     
       permissions (read, write, execute).
       Octal notation sets the permissions for user, group, and others all at once, providing a more straightforward way to specify the exact permissions for each category.

Security Considerations
       Using Octal Notation:
          Standardization: It can be useful for standardizing permissions across a broader file system, especially in scripts and configuration files.
          Security Risk: If not used carefully, it can introduce security risks by inadvertently granting more permissions than intended (e.g., chmod 777).
       Using Symbolic Notation:
          Incremental Changes: It is generally safer for making incremental permission changes, especially on individual files.
          Reduced Risk: By targeting specific permissions, there is a reduced risk of introducing unintended access.
      
Operators
       + : Adds the specified permissions
       - : Removes the specified permissions
       = : sets the specified permissions and removes others

Example  
        chmod u+x <file>       # Adds execute permission for user only
        chmod g-w <file>       # Removes write permission for group only
        chmod o=r <file>       # Sets read permission for others only, removing other permissions
        chmod a+x <file>       # Adds execute permission for all (user, group, others)
        chmod 764 <file>       # Sets permissions to rwxr--r--
        chmod 755 <file>       # Sets permissions to rwxr-xr-x
        chmod 644 <file>       # Sets permissions to rw-r--r--
        chmod 600 <file>       # Sets permissions to rw-------

*******************************************************************************************************************************************************************************
Running a script (./script.sh).
*******************************************************************************************************************************************************************************
Using './'
        ./filename.sh
        This method is the most common way to run a script that is located in the current directory and is executable.

Specifying the Interpreter Directly
        You can explicitly call the interpreter (e.g., bash, sh, python, etc.) and pass the script as an argument. This method is useful if the script is not executable or if          you want to ensure it runs with a specific interpreter.
          bash filename.sh
          sh filename.sh
          python filename.py

Adding the Script's Directory to the PATH
        You can add the directory containing the script to your PATH environment variable, allowing you to run the script from anywhere without specifying the path.
        To make this change permanent, add the export command to your .bashrc or .profile file.

        export PATH=$PATH:/path/to/your/script
        file.sh
        
Using source or .
        The source command (or its shorthand .) runs the script in the current shell, rather than spawning a new subshell. This method is useful if the script modifies                environment variables or changes the current directory.
        
        source file.sh
        . file.sh

Invoking the Script with env
        You can use env to run the script with a specific environment.
        
        env /path/to/your/script/file.sh
